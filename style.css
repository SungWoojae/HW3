h1{
    color: brown;
}

/* universal selector */
* {
    box-sizing: border-box;
}

/* 다수의 selector 지정 가능 */
h2,p {
    color: red;
}

/* class를 통한 지정 */
.coding {
    color: yellow;
}

/* 특정 class 내에서 특정 tag만 지정 */
h2.coding {
    color: black;
}

/* id를 통한 지정 */
#original {
    color: purple;
}

/* 특정 id 내에서 특정 tag만 지정 */
h2#original {
    color: orange;
}

/* 자식 tag 지정 */
div p {
    color: skyblue;
}


/* [css 특징]
1. 폭포수(cascading)
같은 태그에 대한 규칙은 마지막으로 작성된 규칙 적용


2. 상속(inheritance)
부모요소의 css를 자식요소가 상속 but 자식요소의 css가 우선시

3. 우선순위(specificity)
css 규칙이 서로 충돌할 때
    1) html 요소의 style 속성 1000
    <h2 style="color: blue;"></h2>
    2) id로 선택된 요소 100
    3) class로 선택된 요소 10
    .coding { color: blue; }
    4) 태그의 이름으로 선택된 요소 1
    h2 { color: brown; } */

/* 
[inline 요소] ex) <a>,<img>,<span>
- 줄바꿈 X
- 태그로 감싸진 내용만큼 영역 차지
- width와 height로 요소 크기 조절 X ~ layout(다른 요소들과의 관계) 설정 불가능
- 좌우 margin, padding만 적용 가능

[block 요소] ex) <h1>,<p>,<div>
- 줄 바꿈 O
- width와 height로 요소 크기 조절 O
- 내용과 별개로 자신의 영역 존재

[inline-block] (display: inline-block, 메뉴바 등에 사용)
- 줄바꿈 X
- width와 height 가짐
- 상하 margin, padding이 레이아웃에 유효 

[box model]
여백(margin) [ 테두리(border) [ 패딩(padding) [ 내용(content) ] ] ] / 각각은 width와 height를 가짐

1)margin : 테두리로부터 다른 요소까지의 거리 / div { margin: 20px; margin: 20px(상하) 30px(좌우); 20px(상) 10px(우) 20px(하) 10px(좌); margin-top:20px;}
2)border : 내용을 둘러싼 테두리 / div { border: 6px solid blue; border-width: 6px;}
3)padding : 내용으로부터 테두리까지의 거리 / margin과 비슷
*/

/* 
div { box-sizing: content-box;}가 default (요소 사이즈에 패딩과 테두리 포함 X)
div { box-sizing: border-box;} (요소 사이즈에 패딩과 테두리 포함O)

따라서 * { box-sizing: border-box;}를 입력해놓고 시작해야 사이즈가 왜곡되지 않음
*/

/* [CSS의 단위]
1) px : 스크린을 구성하는 작은 점
2) % : 부모 요소를 기준으로 크기를 설정
3) em : 부모요소의 폰트 크기를 기준으로 (ex : div.outer{font-size: 20px;} => inner에서 width: 2em이면 20px*2=40px) 
   => 요소 간의 관계가 복잡하다. 따라서 최상위 요소인 <html>의 폰트 사이즈를 기준으로 하자.
4) rem : 루트 요소의 폰트 크기를 기준으로 (ex : html {font-size: 10px;} 이면 2rem=20px)
5) vw : 각 디바이스별 화면의 너비/높이를 기준으로 배율 설정 (ex : 브라우저 영역을 항상 꽉 채우기 -> div.expand{ height: 100vh;})
   => 스크롤을 통해서 하단의 컨텐츠로 이동 가능
*/

/* [이미지 다루기]
1) <img>로 이미지 삽입 (img태그는 인라인 요소라서 div로 마크업 후 사용하기도)
<div class="container">
    <img
        src=""
        alt=""
    >
</div>

    - img { max-width: 100%; } : 부모 영역에서 벗어나지 않도록 이미지의 너비 상한선을 100%로 설정
    - img { object-fit: cover; } : 이미지를 부모 요소의 영역의 크기 만큼 확대/축소 -> 원본 비율 유지 (object-fit은 기본적으로 가운데 정렬)
                        contain; : 이미지의 비율을 유지하면서 크기를 변경하여 부모 요소를 채움(높이와 너비 중 가장 먼저 부모의 크기에 도달하는 지점에서 멈춤
                        fill; : 이미지의 비율을 유지하지 않고 부모 요소의 크기에 맞춤


*/

/* [overflow]
<div class="overflow">
    CSS<br>IS<br>AWESOME
</div>

div.overflow {
    overflow: hidden; : 삐져나오는 부분을 아예 안보여줌
    overflow: scroll; : 스크롤을 통해 표현(가로, 세로 둘다 생성)
    overflow-x: scroll; : x축으로만 스크롤 생성
        => 무작정 scroll을 만드는 경우가 있음
    overflow: auto; : 넘치는 방향으로만 scroll 생성
*/

/*  [폰트 꾸미기] 
p {
    color: green;
    color: #008000; : Hex Color -> RGB의 값을 각각 16진수로 나타내어 조합
    font-style: italic; : 기울임꼴 -> span태그로도 가능
    font-weight: bold; : 굵게. 정도가 있음.
    text-decoration: underline; : 밑줄 표시
    text-decoration: none; : 밑줄 없애줌

a.link {
    color: black; : 클릭한 적이 없는 링크

a.visited {
    color: black; : 방문했던 링크
*/

/* [테두리 꾸미기]
<div class="containter">
</div>

.container {
    border-width: 2px;
    border-style: solid; : 실선으로 표시
    border-color: blue;

    border: 2px solid blue; : 한꺼번에 가능 (두께 스타일 색상)
    border-radius: 20px; : 모서리를 둥글게
*/

/* [배경 이미지 설정]
<div class="container">
    <p>안녕하세요</p>
</div?

.container {
    background-color: yellow;
    background-image: url(.jpg); : 기본값. 짤리고 안보이고...
    background-repeat: no-reapeat; : 이미지 한개만, 모서리의 시작 부분에만
    background-size: contain; : 이미지가 온전히 표현되는 것이 우선
    background-size: cover; : 요소의 배경을 모두 덮는 것이 우선 -> 짤릴수도
    background-position: center; : 가운데 정렬
=> 이미지 자체를 레이아웃에 맞는 해상도로 크롭해서 사용하는 것 권장!

p {
    background-color: skyblue;
*/

/* [요소 정렬하기]
body {
    margin: 0 auto; : body 내의 모든 것 가운데 정렬(상하의 margin=0, 좌우의 margin=auto)
        => 보통 상위의(부모의) 요소에 사용해서 전체를 정렬
        => 부모 block 요소의 width를 기준으로 하기 때문에 부모가 width값을 갖고 잇어야함
div {    
    text-align: center; : 부모 block 요소의 하위의 inline 요소를 가운데로 정렬
*/

/* --------------------------------------------- */


/* [Float : 자식 요소가 부모로부터 떠오르다... margin을 없애버리다]
- 원래는 부모요소의 width값만큼 자식 요소의 margin 값을 가짐
- 밑에 있는 요소가 겹쳐지게 됨....
    => 가로배치를 하고 싶은 모든 요소에 float

    */
div.pink, div.blue {
    width:50px;
    height:50px;
    float: left;
}


/* [clear]
=> div 요소의 가로 배치를 위해 float를 적용했는데.. float로 없어진 margin 영역 때문에 컨텐츠 범람

- float로 인해 딸려가는 현상 막아줌. float와 같은 방향 지정.
- clearfix : clear로 레이아웃을 고치는 양식
(범람을 막고 싶은 요소) ::after{ : 어떤 요소 바로 뒤에적용
    content: ""; 
    display: block;
    clear: both;

ex)
header::after{
    content:"";
    display: block;
    clear: both;
*/

/* [Flex] : 가로배치
- 원래는 float로 margin 없애고 margin을 따로 줘서 가로배치 해야됐음..
- Flexbox : Flex가 적용된 block 요소
    1) flex container : {display: flex;}를 선언한 부모 요소
    2) flex item : flex container의 자식 요소(배치를 원하는 요소)
    3) main axis : 가로배치의 주축; 세로배치의 보조축
    4) cross axis : 세로배치의 주축; 가로배치의 보조축

.container {
    display: flex; 자동으로 가로 배치
    justify-content: space-between; 요소 간 간격 일정하게 자동으로 할당
*/

/* [Position]
1) static : 모든 요소의 디폴트값. 생성된 위치
2) relative : 원래 위치를 기준으로 요소를 움직일 때 사용
div {
    position: relative;
    left: 50px; : 원래 위치 기준 left 50px

3) absolute : 가장 가까운 부모를 기준으로(static이 아닌것) 위치 지정,부모요소가 없으면 body를 기준으로 움직임
4) fixed : 브라우저 창을 기준으로 고정된 위치
div {
    position: fixed;
    top: 0;
    left: 0;

5)sticky : 스크롤로 특정 위치에 도달하면 고정
div {
    position: sticky;
    top: 0; : top 0인 위치에서 고정
*/

/* [Grid] : 페이지 레이아웃의 가이드라인
1) container : Grid system이 적용될 영역
2) row : 행. float된 column. 요소가 흘러 넘치기 않게 하는 역할
3) column : 열. 요소의 위치 결정에서 실질적인 역할 수행
4) gutter : row와 column 사이의 간격. 한 column 양 옆에 있는 margin이 gutter 구성

*/



/* --------------------------------------------- */

/* [Google Fonts]*/

/* [Font Awesome] : 다양한 아이콘 가져다 쓰기*/


div.yellow, div.green ::after{
    content:"";
    display: block;
    clear: both;
}

div.sticky {
    position: sticky;
    top: 0;
}

p {
    font-family: 'Do Hyeon', sans-serif;
}
